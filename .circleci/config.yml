version: 2.1

job_defaults: &job_defaults
  filters:
    tags:
      ignore: /.*/
    branches:
      only: /.*/

job_only_tags: &job_only_tags
  filters:
    tags:
      only: /.*/
    branches:
      ignore: /.*/

orbs:
  codecov: codecov/codecov@5.4.3
  docker: circleci/docker@2.8.2
  node: circleci/node@7.2.0
  semantic-release: trustedshops-public/semantic-release@6.0.0

commands:
  restore_rust_cache:
    steps:
      - restore_cache:
          keys:
            - cargo-cache-{{ checksum "server/Cargo.lock" }}
  save_rust_cache:
    steps:
      - save_cache:
          key: cargo-cache-{{ checksum "server/Cargo.lock" }}
          paths:
            - ~/.cargo
            - server/target/debug
            - server/target/release
  save_sccache:
    steps:
      - save_cache:
          key: sccache-cache-stable-{{ arch }}-{{ .Environment.CIRCLE_JOB }}-{{ epoch }}
          paths:
            - ~/.cache/sccache
  restore_sccache:
    steps:
      - restore_cache:
          keys:
            - sccache-cache-stable-{{ arch }}-{{ .Environment.CIRCLE_JOB }}
  install_sccache:
    parameters:
      version:
        type: string
        default: "0.10.0"
    steps:
      - run:
          name: Install sccache
          command: |
            SCCACHE_VERSION="<<parameters.version>>"

            curl -L "https://github.com/mozilla/sccache/releases/download/v${SCCACHE_VERSION}/sccache-v${SCCACHE_VERSION}-x86_64-unknown-linux-musl.tar.gz" -o /tmp/sccache-archive.tar.gz
            tar -xvzf /tmp/sccache-archive.tar.gz -C /tmp
            sudo mv /tmp/sccache-v${SCCACHE_VERSION}-x86_64-unknown-linux-musl/sccache /usr/local/bin/sccache
            
            # Set environment variables for sccache
            echo 'export RUSTC_WRAPPER=/usr/local/bin/sccache' >> $BASH_ENV
            source $BASH_ENV
            
            # Verify installation
            sccache --version

jobs:
  update-dockerhub-readme:
    executor: docker/docker
    steps:
      - checkout
      - docker/update-description:
          image: timoreymann/auth0-user-gatekeeper
          docker-username: DOCKER_USERNAME
          docker-password: DOCKER_TOKEN
  build-server-container:
    parameters:
      buildx_extra_args:
        type: string
        default: ""
    executor:
      name: docker/machine
      dlc: true
    steps:
      - checkout
      - run:
          name: Build image
          command: |
            echo "$DOCKER_TOKEN" | docker login -u "$DOCKER_USERNAME" --password-stdin
            docker buildx create --use
            export BUILDKIT_PROGRESS=plain
            cd server/
            docker buildx build . \
              -t timoreymann/auth0-user-gatekeeper:latest \
              -f Dockerfile \
              --platform linux/amd64 \
              <<parameters.buildx_extra_args>>
  test-server:
    docker:
      - image: cimg/rust:1.90.0
    steps:
      - checkout
      - install_sccache
      - restore_sccache
      - run:
          name: Show sccache stats
          command: |
            sccache --show-stats
      - restore_rust_cache
      - run:
          name: Install cargo tools
          command: |
            TARPAULIN_VERSION="0.32.8"
            curl -L https://github.com/xd009642/tarpaulin/releases/download/${TARPAULIN_VERSION}/cargo-tarpaulin-x86_64-unknown-linux-musl.tar.gz -o /tmp/cargo-tarpaulin.tar.gz
            tar -xvzf /tmp/cargo-tarpaulin.tar.gz -C /tmp
            sudo mv /tmp/cargo-tarpaulin /usr/local/bin/cargo-tarpaulin
            
            cargo install cargo2junit --version 0.1.14
      - run:
          name: Run tests and generate test reports
          command: |
            cd server
            mkdir -p test-results
            RUSTC_BOOTSTRAP=1 cargo test -- -Z unstable-options --format json --report-time | cargo2junit > test-results/junit.xml
            cargo tarpaulin --out Xml --output-dir ./coverage --no-fail-fast --engine Llvm
      - save_sccache
      - store_test_results:
          path: server/test-results
      - codecov/upload
      - save_rust_cache
      - run:
          name: Show sccache stats
          command: |
            sccache --show-stats

  test-node-lib:
    executor: node/default
    steps:
      - checkout
      - node/install-packages:
          pkg-manager: yarn-berry
          app-dir: node-lib
      - run:
          name: Run tests
          command: |
            cd node-lib
            yarn test \
              --no-watch \
              --reporter junit \
              --outputFile test-results/junit.xml \
              --coverage \
              --coverage.reporter clover
      - codecov/upload
      - store_test_results:
          path: node-lib/test-results
  build-node-lib:
    executor: node/default
    steps:
      - checkout
      - node/install-packages:
          pkg-manager: yarn-berry
          app-dir: node-lib
      - run:
          name: Build
          command: |
            cd node-lib
            yarn build
  publish-node-lib:
    executor: node/default
    steps:
      - checkout
      - node/install-packages:
          pkg-manager: yarn-berry
          app-dir: node-lib
      - run:
          name: Publish
          command: |
            cd node-lib
            echo 'npmAuthToken: "${NPM_TOKEN}"' >> .yarnrc.yml
            yarn build
            yarn npm publish --access public
  upload-config-schema:
    docker:
      - image: timoreymann/schemanest-cli:v0.7.27
    steps:
      - checkout
      - run:
          name: Upload to Schemanest
          command: |
            schema-nest-cli upload-json-schema \
              --base-url https://schema-nest.timo-reymann.de \
              --api-key "$SCHEMA_NEST_UPLOAD_KEY" \
              --version "$CIRCLE_TAG" \
              --path server/config.schema.json \
              --identifier auth0-user-gatekeeper

workflows:
  version: 2
  main:
    jobs:
      - test-node-lib:
          <<: *job_defaults
      - test-server:
          <<: *job_defaults
      - build-server-container:
          name: build-server-container-no-push
          buildx_extra_args: |
            --load
          <<: *job_defaults
          requires:
            - test-server
      - build-node-lib:
          <<: *job_defaults
          requires:
            - test-node-lib
      - semantic-release/with_existing_config:
          name: semantic-release
          additional_packages: "@google/semantic-release-replace-plugin"
          requires:
            - build-node-lib
            - build-server-container-no-push
          filters:
            branches:
              only:
                - main
  release:
    jobs:
      - build-server-container:
          name: build-server-container-push
          <<: *job_only_tags
          buildx_extra_args: |
            -t timoreymann/auth0-user-gatekeeper:${CIRCLE_TAG} \
            --push
      - update-dockerhub-readme:
          requires:
            - build-server-container-push
          <<: *job_only_tags
      - publish-node-lib:
          <<: *job_only_tags
      - upload-config-schema:
          <<: *job_only_tags
